[
  {
    "id": "deep-dive-unveiling-kesi-android",
    "title": "Deep Dive: Unveiling Kesi Android",
    "description": "Welcome to the very first deep dive on this blog! Today, we're not just skimming the surface. We're jumping headfirst into the intricate world of Android development by dissecting a complete application",
    "img": "deep-dive-unveiling-kesi-android.jpg"
  },
  {
    "id": "kesi-android-multi-module",
    "title": "Kesi Android Multi-Module Architecture",
    "description": "In this post, I'll walk you through how Kesi Android divided its codebase into distinct modules to achieve a multi-module architecture. I'll explain the reasoning behind each module, and discuss how this approach helps us adhere to SOLID principles and significantly enhances project scalability.",
    "img": "kesi-android-multi-module.jpg"
  },
  {
    "id": "gradle-convention-plugins",
    "title": "Gradle convention plugins in Kesi Android",
    "description": "Ah, Gradle. The powerful, flexible, and sometimes overwhelmingly complex build system that powers our Android projects. If you've ever found yourself endlessly copying and pasting configurations across `build.gradle.kts` files, battling inconsistencies between modules, or dreading the thought of updating a common dependency everywhere, then this post is for you. This was certainly our reality at Kesi Android before we embraced a more structured approach.",
    "img": "gradle-convention-plugins.jpg"
  },
  {
    "id": "hilt",
    "title": "Unlock Simpler Android Development: A Deep Dive into Hilt",
    "description": "Hey Android Devs! \uD83D\uDC4B Are you tired of wrestling with boilerplate code for dependency injection? Do you dream of a cleaner, more maintainable, and testable codebase? If you nodded yes (even a little!), then you're in the right place. Today, we're diving deep into **Hilt**, Google's recommended dependency injection framework for Android, and how it can revolutionize your development workflow.",
    "img": "hilt.jpg"
  },
  {
    "id": "solid",
    "title": "SOLID in Jetpack Compose: Building Bulletproof Android UIs That Spark Joy",
    "description": "Hey Android devs! We're all riding the Jetpack Compose wave, and loving it, right? Declarative UIs, less boilerplate, and a more intuitive way to build beautiful apps.",
    "img": "solid.jpg"
  },
  {
    "id": "mvi",
    "title": "MVI with Compose & SharedFlow: The Secret Sauce for Modern Android UIs",
    "description": "Are you tired of wrestling with unpredictable UI states, complex ViewModel logic, and testing nightmares? In the ever-evolving landscape of Android development, building robust, scalable, and maintainable UIs is paramount.",
    "img": "mvi.jpg"
  },
  {
    "id": "kotlin-coroutines-compose",
    "title": "Mastering Kotlin Coroutines in Jetpack Compose",
    "description": "In the fast-paced world of Android development, building slick, responsive user interfaces is paramount. Users expect apps to be fluid, without janky animations or frozen screens, especially when data is being fetched or processed in the background.",
    "img": "kotlin-coroutines-compose.jpg"
  },
  {
    "id": "kotlin-scoped-functions",
    "title": "Kotlin Scoped Functions: Unlock Cleaner, More Expressive Code!",
    "description": "Ever feel like your Kotlin code could be just a little bit tighter, a tad more readable? You're not alone! While Kotlin is already a beautifully concise language, there's a set of tools in its standard library that can elevate your code from good to great:",
    "img": "kotlin-scoped-functions.jpg"
  },
  {
    "id": "kotlin-inline",
    "title": "Kotlin's Inline Secrets",
    "description": "By the end of this post, you'll not only understand what each of these keywords does but also how they beautifully interrelate. Let's demystify them!",
    "img": "kotlin-inline.jpg"
  },
  {
    "id": "kotlin-generics",
    "title": "Kotlin Generics Demystified",
    "description": "Generics. The word alone can evoke a mix of appreciation for type safety and a slight dread of complex angle-bracket syntax. But if you're a Kotlin developer, you're in luck! Kotlin's approach to generics is designed to be more intuitive and powerful",
    "img": "kotlin-generics.jpg"
  },
  {
    "id": "kotlin-delegated-properties",
    "title": "Kotlin Delegated Properties: Your Secret Weapon for Cleaner, More Magical Code!",
    "description": "Ever found yourself writing the same boilerplate code over and over for property getters and setters? Maybe you need to trigger an action when a property changes, or perhaps you want a",
    "img": "kotlin-delegated-properties.jpg"
  },
  {
    "id": "clean-architecture",
    "title": "Clean Architecture in Modern Android",
    "description": "Ever found yourself tangled in a web of Activity code that does everything from UI updates to network calls and database queries? Or maybe you've dreaded making a",
    "img": "clean-architecture.jpg"
  },
  {
    "id": "ssot",
    "title": "Mastering Single Source of Truth in Jetpack Compose",
    "description": "In the ever-evolving landscape of Android development, one principle remains a steadfast guide to building clean, predictable, and scalable applications: the Single Source of Truth (SSoT)",
    "img": "ssot.jpg"
  },
  {
    "id": "udf",
    "title": "Unidirectional Data Flow in Jetpack Compose",
    "description": "Tired of tangled UI logic and unpredictable state changes? Ever found yourself debugging for hours, lost in a maze of callbacks and mutable variables? If you're nodding along, then",
    "img": "udf.jpg"
  },
  {
    "id": "viewmodel",
    "title": "ViewModel & Jetpack Compose",
    "description": "We've all been there. You've crafted a beautiful UI, your app is running smoothly, and then... BAM!",
    "img": "viewmodel.jpg"
  },
  {
    "id": "config-changes-compose",
    "title": "Configuration Changes in Jetpack Compose",
    "description": "Enter Jetpack Compose, the modern UI toolkit that's revolutionizing how we build Android apps. While Compose brings a declarative and more intuitive way to craft UIs, the underlying Android",
    "img": "config-changes-compose.jpg"
  },
  {
    "id": "compose-local-providers",
    "title": "CompositionLocals - When to Use Static vs. Dynamic",
    "description": "So, you're diving deep into Jetpack Compose, crafting beautiful, reactive UIs. You've probably encountered situations where you need to pass data down your Composable tree, but \"prop drilling\" ",
    "img": "compose-local-providers.jpg"
  },
  {
    "id": "room",
    "title": "Jetpack Room with Compose - The Ultimate Guide!",
    "description": "In this post, we're diving deep into why Room is the go-to solution for local storage in Android and, more importantly, how to make it sing in harmony with Jetpack Compose.",
    "img": "room.jpg"
  },
  {
    "id": "jetpack-datastore",
    "title": "Jetpack DataStore Preferences",
    "description": "Enter Jetpack DataStore Preferences! This is Google's modern, robust, and safer alternative for storing key-value pairs. If you're building with Jetpack Compose and want a reactive",
    "img": "jetpack-datastore.jpg"
  }
]
